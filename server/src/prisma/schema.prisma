generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime

  @@map("sessions")
}

model User {
  // User can have many folders and files
  id           Int            @id @default(autoincrement())
  displayName  String
  email        String         @unique
  password     String
  folders      Folder[]
  files        File[]
  SharedFolder SharedFolder[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("users")
}

model Folder {
  // A folder belongs to a user and can contain many files
  id           String         @id @default(uuid())
  name         String
  ownerId      Int
  owner        User           @relation(fields: [ownerId], references: [id])
  files        File[]
  SharedFolder SharedFolder[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("folders")
}

model File {
  // A file belongs to a user and a folder
  id        String   @id @default(uuid())
  name      String
  mimeType  String
  size      Int
  ownerId   Int
  url       String
  owner     User     @relation(fields: [ownerId], references: [id])
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}

model SharedFolder {
  // id will be used as a unique link
  id        String   @id @default(uuid())
  userId    Int
  owner     User     @relation(fields: [userId], references: [id])
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  expiresAt DateTime

  @@map("shared_folders")
}
